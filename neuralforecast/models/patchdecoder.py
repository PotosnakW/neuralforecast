# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/models.patchdecoder.ipynb.

# %% auto 0
__all__ = ['SinCosPosEncoding', 'Transpose', 'get_activation_fn', 'PositionalEncoding', 'Coord2dPosEncoding',
           'Coord1dPosEncoding', 'positional_encoding', 'RevIN', 'PatchTST_backbone', 'Flatten_Head', 'TSTiDecoder',
           'TSTDecoder', 'TSTDecoderLayer', 'PatchDecoder']

# %% ../../nbs/models.patchdecoder.ipynb 5
import math
import numpy as np
from typing import Optional  # , Any, Tuple

import torch
import torch.nn as nn
import torch.nn.functional as F

from transformers import T5Config, T5EncoderModel, T5Model
from transformers.models.t5.modeling_t5 import T5Attention, T5Stack, T5Block, T5LayerNorm

from ..common._base_patch import BasePatch
from ..common._instance_norm import RevIN
from ..common._positional_encodings import PositionalEncoding
from ..common._projections import ProjectionHead 

from ..losses.pytorch import MAE

class T5AttentionWithoutRelativePosition(T5Attention):
    def __init__(self, config, has_relative_attention_bias=False):
        super().__init__(config)
        self.has_relative_attention_bias = has_relative_attention_bias  # Disable bias
        
        
class CustomT5Stack(T5Stack):
    def __init__(self, config, embed_tokens=None):
        super().__init__(config, embed_tokens)
        
        self.embed_tokens = embed_tokens
        self.is_decoder = config.is_decoder

        # Override the block to ensure has_relative_attention_bias=False
        self.block = nn.ModuleList(
            [T5Block(config, has_relative_attention_bias=False, layer_idx=i) for i in range(config.num_layers)]
        )
        self.final_layer_norm = T5LayerNorm(config.d_model, eps=config.layer_norm_epsilon)
        self.dropout = nn.Dropout(config.dropout_rate)

        # Initialize weights and apply final processing
        self.post_init()
        # Model parallel
        self.model_parallel = False
        self.device_map = None
        self.gradient_checkpointing = False

# %% ../../nbs/models.patchtst.ipynb 15
class PatchTST_backbone(nn.Module):
    """
    PatchTST_backbone
    """

    def __init__(
        self,
        config: dict,
        c_in: int,
        c_out: int,
        input_size: int,
        h: int,
        input_patch_len: int,
        output_patch_len: int,
        stride: int,
        hidden_size: int,
        key_padding_mask: str = "auto",
        attn_mask: str = "bidirectional",
        pe: str = "zeros",
        learn_pe: bool = True,
        fc_dropout: float = 0.0,
        head_dropout=0,
        padding_patch=None,
        head_type="flatten",
        individual=False,
        revin=True,
        affine=True,
        subtract_last=False,
    ):

        super().__init__()

        # RevIn
        self.revin = revin
        if self.revin:
            self.revin_layer = RevIN(c_in, affine=affine, subtract_last=subtract_last)

        # Patching
        self.input_patch_len = input_patch_len
        self.stride = stride
        self.padding_patch = padding_patch
        patch_num = int((input_size - input_patch_len) / stride + 1)
        if padding_patch == "end":  # can be modified to general case
            self.padding_patch_layer = nn.ReplicationPad1d((0, stride))
            patch_num += 1

        # Backbone
        self.backbone = TSTDecoder(
            config,
            c_in,
            hidden_size,
            patch_num=patch_num,
            input_patch_len=input_patch_len,
            key_padding_mask=key_padding_mask,
            attn_mask=attn_mask,
            pe=pe,
            learn_pe=learn_pe,
        )

        # Head
        self.head_nf = hidden_size * patch_num
        self.n_vars = c_in
        self.c_out = c_out
        self.head_type = head_type
        self.individual = individual

        proj_hd = ProjectionHead(
            self.individual,
            self.n_vars,
            self.head_nf,
            output_patch_len, #h
            c_out,
            head_dropout,
        )

        if head_type == "flatten":
            proj_hd.flatten_head()  # Initialize layers in ProjectionHead
            self.head = proj_hd
        elif head_type == "residual_network":
            proj_hd.residual_network()  # Initialize layers in ProjectionHead
            self.head = proj_hd

    def forward(self, z):  # z: [bs x nvars x seq_len]
        # norm
        if self.revin:
            z = z.permute(0, 2, 1)
            z = self.revin_layer(z, "norm")
            z = z.permute(0, 2, 1)

        # do patching
        if self.padding_patch == "end":
            z = self.padding_patch_layer(z)
        z = z.unfold(
            dimension=-1, size=self.input_patch_len, step=self.stride
        )  # z: [bs x nvars x patch_num x input_patch_len
        z = z.permute(0, 1, 3, 2)  # z: [bs x nvars x input_patch_len x patch_num]

        # model
        z = self.backbone(z)  # z: [bs x nvars x hidden_size x patch_num]
       # embeddings = z.clone() # Willa: uncomment to get embeddings
        z = self.head(z)  # z: [bs x nvars x h]

        # denorm
        if self.revin:
            z = z.permute(0, 2, 1)
            z = self.revin_layer(z, "denorm")
            z = z.permute(0, 2, 1)
        return z
    # return z # Willa: uncomment to get embeddings

class TSTDecoder(nn.Module):  # i means channel-independent
    """
    TSTDecoder
    """

    def __init__(
        self,
        config,
        c_in,
        hidden_size,
        patch_num,
        input_patch_len,
        attn_dropout=0.0,
        dropout=0.0,
        act="gelu",
        key_padding_mask="auto",
        attn_mask="bidirectional",
        pe="zeros",
        learn_pe=True,
    ):

        super().__init__()

        self.patch_num = patch_num
        self.input_patch_len = input_patch_len
        self.attn_mask = attn_mask

        # Input encoding
        q_len = patch_num
        self.W_P = nn.Linear(
            input_patch_len, hidden_size
        )  # Eq 1: projection of feature vectors onto a d-dim vector space
        self.seq_len = q_len
        
        # Positional encoding
        self.W_pos = PositionalEncoding(pe=pe).forward(learn_pe, q_len, hidden_size)

        # Residual dropout
        self.dropout = nn.Dropout(dropout)

        # Encoder
        model_config = T5Config.from_dict(config)
        transformer_backbone = T5Model(model_config)
        #transformer_backbone.decoder = CustomT5Stack(model_config)
        #self.decoder = transformer_backbone.get_decoder()#transformer_backbone.get_decoder()
        transformer_backbone.encoder = CustomT5Stack(model_config)
        self.decoder = transformer_backbone.get_encoder()#transformer_backbone.get_decoder()

        # for layer in self.encoder.block:
        #     layer.layer[0].SelfAttention = T5AttentionWithoutRelativePosition(model_config)
        
        if config["enable_gradient_checkpointing"]==True:
            transformer_backbone.gradient_checkpointing_enable()

    def forward(self, x) -> torch.Tensor:  # x: [bs x nvars x input_patch_len x patch_num]

        n_vars = x.shape[1]
        # Input encoding
        x = x.permute(0, 1, 3, 2)  # x: [bs x nvars x patch_num x input_patch_len]
        x = self.W_P(x)  # x: [bs x nvars x patch_num x hidden_size]

        u = torch.reshape(
            x, (x.shape[0] * x.shape[1], x.shape[2], x.shape[3])
        )  # u: [bs * nvars x patch_num x hidden_size]
        u = self.dropout(u + self.W_pos)  # u: [bs * nvars x patch_num x hidden_size]

        # Decoder
        if self.attn_mask=='bidirectional':
            attn_mask = torch.ones(x.shape[0], u.shape[2], dtype=torch.long).to(x.device)
        elif self.attn_mask=='causal':
            attn_mask = torch.tril(torch.ones(x.shape[0], u.shape[2], dtype=torch.long, device=x.device))

        z = self.decoder(inputs_embeds=u, attention_mask=attn_mask)
        z = z.last_hidden_state
        z = torch.reshape(
            z, (-1, n_vars, z.shape[-2], z.shape[-1])
        )  # z: [bs x nvars x patch_num x hidden_size]
        z = z.permute(0, 1, 3, 2)  # z: [bs x nvars x hidden_size x patch_num]

        return z

# %% ../../nbs/models.patchtst.ipynb 17
class PatchDecoder(BasePatch):
    """PatchTST

    The PatchTST model is an efficient Transformer-based model for multivariate time series forecasting.

    It is based on two key components:
    - segmentation of time series into windows (patches) which are served as input tokens to Transformer
    - channel-independence, where each channel contains a single univariate time series.

    **Parameters:**<br>
    `h`: int, Forecast horizon. <br>
    `input_size`: int, autorregresive inputs size, y=[1,2,3,4] input_size=2 -> y_[t-2:t]=[1,2].<br>
    `stat_exog_list`: str list, static exogenous columns.<br>
    `hist_exog_list`: str list, historic exogenous columns.<br>
    `futr_exog_list`: str list, future exogenous columns.<br>
    `exclude_insample_y`: bool=False, the model skips the autoregressive features y[t-input_size:t] if True.<br>
    `decoder_layers`: int, number of layers for decoder.<br>
    `n_heads`: int=16, number of multi-head's attention.<br>
    `hidden_size`: int=128, units of embeddings and decoder.<br>
    `linear_hidden_size`: int=256, units of linear layer.<br>
    `dropout`: float=0.1, dropout rate for residual connection.<br>
    `fc_dropout`: float=0.1, dropout rate for linear layer.<br>
    `head_dropout`: float=0.1, dropout rate for Flatten head layer.<br>
    `attn_dropout`: float=0.1, dropout rate for attention layer.<br>
    `input_patch_len`: int=32, length of patch. Note: intput_patch_len = min(input_patch_len, input_size + stride).<br>
    `output_patch_len`: int=32, length of patch. Note: output_patch_len = min(output_patch_len, h).<br>
    `stride`: int=16, stride of patch.<br>
    `revin`: bool=True, bool to use RevIn.<br>
    `revin_affine`: bool=False, bool to use affine in RevIn.<br>
    `revin_substract_last`: bool=False, bool to use substract last in RevIn.<br>
    `activation`: str='ReLU', activation from ['gelu','relu'].<br>
    `res_attention`: bool=False, bool to use residual attention.<br>
    `batch_normalization`: bool=False, bool to use batch normalization.<br>
    `learn_pos_embedding`: bool=True, bool to learn positional embedding.<br>
    `loss`: PyTorch module, instantiated train loss class from [losses collection](https://nixtla.github.io/neuralforecast/losses.pytorch.html).<br>
    `valid_loss`: PyTorch module=`loss`, instantiated valid loss class from [losses collection](https://nixtla.github.io/neuralforecast/losses.pytorch.html).<br>
    `max_steps`: int=1000, maximum number of training steps.<br>
    `learning_rate`: float=1e-3, Learning rate between (0, 1).<br>
    `num_lr_decays`: int=-1, Number of learning rate decays, evenly distributed across max_steps.<br>
    `early_stop_patience_steps`: int=-1, Number of validation iterations before early stopping.<br>
    `val_check_steps`: int=100, Number of training steps between every validation loss check.<br>
    `batch_size`: int=32, number of different series in each batch.<br>
    `valid_batch_size`: int=None, number of different series in each validation and test batch, if None uses batch_size.<br>
    `windows_batch_size`: int=1024, number of windows to sample in each training batch, default uses all.<br>
    `inference_windows_batch_size`: int=1024, number of windows to sample in each inference batch.<br>
    `start_padding_enabled`: bool=False, if True, the model will pad the time series with zeros at the beginning, by input size.<br>
    `step_size`: int=1, step size between each window of temporal data.<br>
    `scaler_type`: str='identity', type of scaler for temporal inputs normalization see [temporal scalers](https://nixtla.github.io/neuralforecast/common.scalers.html).<br>
    `random_seed`: int, random_seed for pytorch initializer and numpy generators.<br>
    `num_workers_loader`: int=os.cpu_count(), workers to be used by `TimeSeriesDataLoader`.<br>
    `drop_last_loader`: bool=False, if True `TimeSeriesDataLoader` drops last non-full batch.<br>
    `alias`: str, optional,  Custom name of the model.<br>
    `optimizer`: Subclass of 'torch.optim.Optimizer', optional, user specified optimizer instead of the default choice (Adam).<br>
    `optimizer_kwargs`: dict, optional, list of parameters used by the user specified `optimizer`.<br>
    `lr_scheduler`: Subclass of 'torch.optim.lr_scheduler.LRScheduler', optional, user specified lr_scheduler instead of the default choice (StepLR).<br>
    `lr_scheduler_kwargs`: dict, optional, list of parameters used by the user specified `lr_scheduler`.<br>
    `**trainer_kwargs`: int,  keyword trainer arguments inherited from [PyTorch Lighning's trainer](https://pytorch-lightning.readthedocs.io/en/stable/api/pytorch_lightning.trainer.trainer.Trainer.html?highlight=trainer).<br>

    **References:**<br>
    -[Nie, Y., Nguyen, N. H., Sinthong, P., & Kalagnanam, J. (2022). "A Time Series is Worth 64 Words: Long-term Forecasting with Transformers"](https://arxiv.org/pdf/2211.14730.pdf)
    """

    # Class attributes
    SAMPLING_TYPE = "patch"
    EXOGENOUS_FUTR = False
    EXOGENOUS_HIST = False
    EXOGENOUS_STAT = False

    def __init__(
        self,
        h,
        input_size,
        stat_exog_list=None,
        hist_exog_list=None,
        futr_exog_list=None,
        exclude_insample_y=False,
        decoder_layers: int = 3,
        n_heads: int = 16,
        hidden_size: int = 128,
        linear_hidden_size: int = 256,
        dropout: float = 0.2,
        fc_dropout: float = 0.2,
        head_dropout: float = 0.0,
        attn_dropout: float = 0.0,
        input_patch_len: int = 16,
        output_patch_len: int = 16,
        stride: int = 8,
        revin: bool = True,
        revin_affine: bool = False,
        revin_subtract_last: bool = True,
        activation: str = "gelu",
        res_attention: bool = True,
        batch_normalization: bool = False,
        learn_pos_embed: bool = True,
        loss=MAE(),
        valid_loss=None,
        max_steps: int = 5000,
        learning_rate: float = 1e-4,
        num_lr_decays: int = -1,
        early_stop_patience_steps: int = -1,
        val_check_steps: int = 100,
        batch_size: int = 32,
        valid_batch_size: Optional[int] = None,
        windows_batch_size=1024,
        inference_windows_batch_size: int = 1024,
        start_padding_enabled=False,
        step_size: int = 1,
        scaler_type: str = "identity",
        random_seed: int = 1,
        num_workers_loader: int = 0,
        drop_last_loader: bool = False,
        optimizer=None,
        optimizer_kwargs=None,
        lr_scheduler=None,
        lr_scheduler_kwargs=None,
        pe="zeros",    # Initial zeros for positional encoding
        attn_mask = "causal",
        head_type: str = "flatten", 
        **trainer_kwargs
    ):
        super(PatchDecoder, self).__init__(
            h=h,
            input_patch_len=input_patch_len, 
            output_patch_len=output_patch_len, 
            stride=stride,
            input_size=input_size,
            hist_exog_list=hist_exog_list,
            stat_exog_list=stat_exog_list,
            futr_exog_list=futr_exog_list,
            exclude_insample_y=exclude_insample_y,
            loss=loss,
            valid_loss=valid_loss,
            max_steps=max_steps,
            learning_rate=learning_rate,
            num_lr_decays=num_lr_decays,
            early_stop_patience_steps=early_stop_patience_steps,
            val_check_steps=val_check_steps,
            batch_size=batch_size,
            valid_batch_size=valid_batch_size,
            windows_batch_size=windows_batch_size,
            inference_windows_batch_size=inference_windows_batch_size,
            start_padding_enabled=start_padding_enabled,
            step_size=step_size,
            scaler_type=scaler_type,
            num_workers_loader=num_workers_loader,
            drop_last_loader=drop_last_loader,
            random_seed=random_seed,
            optimizer=optimizer,
            optimizer_kwargs=optimizer_kwargs,
            lr_scheduler=lr_scheduler,
            lr_scheduler_kwargs=lr_scheduler_kwargs,
            **trainer_kwargs
        )

        # Enforce correct patch_len, regardless of user input
        input_patch_len = min(input_size + stride, input_patch_len)
        output_patch_len = min(h, output_patch_len)

        c_out = self.loss.outputsize_multiplier
        self.output_patch_len = output_patch_len

         # Fixed hyperparameters
        c_in = 1  # Always univariate
        padding_patch = "end"  # Padding at the end
        individual = False  # Separate heads for each time series
        key_padding_mask = "auto"  # Not used
        
        config={'num_layers': decoder_layers,
            'num_heads': n_heads,
            'num_decoder_layers': 0, 
            'd_model': hidden_size,
            'd_kv': hidden_size // n_heads,
            'd_ff': linear_hidden_size,
            'dropout_rate': dropout,
            'feed_forward_proj': activation,
            #'relative_attention_num_buckets': 32,
            #'has_relative_attention_bias': False,
            'enable_gradient_checkpointing': False,
            'use_cache': False, 
            'is_decoder': False #, True, 
            }

        self.model = PatchTST_backbone(
            config=config,
            c_in=c_in,
            c_out=c_out,
            input_size=input_size,
            h=h,
            input_patch_len=input_patch_len,
            output_patch_len=output_patch_len,
            stride=stride,
            hidden_size=hidden_size,
            key_padding_mask=key_padding_mask,
            attn_mask=attn_mask,
            pe=pe,
            learn_pe=learn_pos_embed,
            fc_dropout=fc_dropout,
            head_dropout=head_dropout,
            padding_patch=padding_patch,
            head_type=head_type,
            revin=revin,
            affine=revin_affine,
            subtract_last=revin_subtract_last,
        )

    def forward(self, windows_batch):  # x: [batch, input_size]

        # Parse windows_batch
        insample_y = windows_batch["insample_y"]
        # insample_mask = windows_batch['insample_mask']
        # hist_exog     = windows_batch['hist_exog']
        # stat_exog     = windows_batch['stat_exog']
        # futr_exog     = windows_batch['futr_exog']

        # Add dimension for channel
        x = insample_y.unsqueeze(-1)  # [Ws,L,1]

        x = x.permute(0, 2, 1)  # x: [Batch, 1, input_size]
        x = self.model(x)
        x = x.reshape(x.shape[0], self.output_patch_len, -1)  # x: [Batch, output_patch_len, c_out]

        # Domain map
        forecast = self.loss.domain_map(x)

        return forecast
